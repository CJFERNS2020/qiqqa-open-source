using Utilities.Mathematics.LinearAlgebra;

namespace Utilities.Random
{
    public class Sobol : IUniformRandomSource
    {
        private const int BITS = 32;
        private const double N = 4294967296.0;
        private int dim;         // Number of dimensions generated by this instance
        private ulong[,] directions;        // directions[k] - array of direction numbers for dimension k
        private int[,] coefficients;         // coefficients[k] - coefficient array of the k-th primitive polynomial
        private int[] degrees;           // degrees[k] - degree of the k-th primitive polynomial
        private ulong[] x_integer;       // current vector of Sobol integers
        private double[] x_real; // current vector of Sobol reals

        private int index;           // index of current Sobol point

        private void read_prim_pol(int k, int n, int d)
        {
            int j = 0;

            coefficients[k, d] = 1;

            while (n > 0)
            {
                ++j;
                coefficients[k, d - j] = n % 2;
                n = n / 2;
            }

            coefficients[k, 0] = 1;
        }


        public Sobol(int adim)
        {
            MersenneTwister mt = new MersenneTwister();

            dim = adim;

            directions = new ulong[dim, BITS];
            coefficients = new int[dim, 13];
            degrees = new int[dim];
            x_integer = new ulong[dim];
            x_real = new double[dim];

            index = 1;

            if (dim > 3500)
            {
                throw new GenericException("Sobol sequence can have a maximum dimension of 3500.");
            }

            // 360 primitive polynomials, 
            // first coordinate is the encoding,
            // second coordinate is the degree
            int[] primitive_polynomials =
            {
                0,0,
                0,1,
                1,2,
                1,3,
                2,3,
                1,4,
                4,4,
                2,5,
                4,5,
                7,5,
                11,5,
                13,5,
                14,5,
                1,6,
                13,6,
                16,6,
                19,6,
                22,6,
                25,6,
                1,7,
                4,7,
                7,7,
                8,7,
                14,7,
                19,7,
                21,7,
                28,7,
                31,7,
                32,7,
                37,7,
                41,7,
                42,7,
                50,7,
                55,7,
                56,7,
                59,7,
                62,7,
                14,8,
                21,8,
                22,8,
                38,8,
                47,8,
                49,8,
                50,8,
                52,8,
                56,8,
                67,8,
                70,8,
                84,8,
                97,8,
                103,8,
                115,8,
                122,8,
                8,9,
                13,9,
                16,9,
                22,9,
                25,9,
                44,9,
                47,9,
                52,9,
                55,9,
                59,9,
                62,9,
                67,9,
                74,9,
                81,9,
                82,9,
                87,9,
                91,9,
                94,9,
                103,9,
                104,9,
                109,9,
                122,9,
                124,9,
                137,9,
                138,9,
                143,9,
                145,9,
                152,9,
                157,9,
                167,9,
                173,9,
                176,9,
                181,9,
                182,9,
                185,9,
                191,9,
                194,9,
                199,9,
                218,9,
                220,9,
                227,9,
                229,9,
                230,9,
                234,9,
                236,9,
                241,9,
                244,9,
                253,9,
                4,10,
                13,10,
                19,10,
                22,10,
                50,10,
                55,10,
                64,10,
                69,10,
                98,10,
                107,10,
                115,10,
                121,10,
                127,10,
                134,10,
                140,10,
                145,10,
                152,10,
                158,10,
                161,10,
                171,10,
                181,10,
                194,10,
                199,10,
                203,10,
                208,10,
                227,10,
                242,10,
                251,10,
                253,10,
                265,10,
                266,10,
                274,10,
                283,10,
                289,10,
                295,10,
                301,10,
                316,10,
                319,10,
                324,10,
                346,10,
                352,10,
                361,10,
                367,10,
                382,10,
                395,10,
                398,10,
                400,10,
                412,10,
                419,10,
                422,10,
                426,10,
                428,10,
                433,10,
                446,10,
                454,10,
                457,10,
                472,10,
                493,10,
                505,10,
                508,10,
                2,11,
                11,11,
                21,11,
                22,11,
                35,11,
                49,11,
                50,11,
                56,11,
                61,11,
                70,11,
                74,11,
                79,11,
                84,11,
                88,11,
                103,11,
                104,11,
                112,11,
                115,11,
                117,11,
                122,11,
                134,11,
                137,11,
                146,11,
                148,11,
                157,11,
                158,11,
                162,11,
                164,11,
                168,11,
                173,11,
                185,11,
                186,11,
                191,11,
                193,11,
                199,11,
                213,11,
                214,11,
                220,11,
                227,11,
                236,11,
                242,11,
                251,11,
                256,11,
                259,11,
                265,11,
                266,11,
                276,11,
                292,11,
                304,11,
                310,11,
                316,11,
                319,11,
                322,11,
                328,11,
                334,11,
                339,11,
                341,11,
                345,11,
                346,11,
                362,11,
                367,11,
                372,11,
                375,11,
                376,11,
                381,11,
                385,11,
                388,11,
                392,11,
                409,11,
                415,11,
                416,11,
                421,11,
                428,11,
                431,11,
                434,11,
                439,11,
                446,11,
                451,11,
                453,11,
                457,11,
                458,11,
                471,11,
                475,11,
                478,11,
                484,11,
                493,11,
                494,11,
                499,11,
                502,11,
                517,11,
                518,11,
                524,11,
                527,11,
                555,11,
                560,11,
                565,11,
                569,11,
                578,11,
                580,11,
                587,11,
                589,11,
                590,11,
                601,11,
                607,11,
                611,11,
                614,11,
                617,11,
                618,11,
                625,11,
                628,11,
                635,11,
                641,11,
                647,11,
                654,11,
                659,11,
                662,11,
                672,11,
                675,11,
                682,11,
                684,11,
                689,11,
                695,11,
                696,11,
                713,11,
                719,11,
                724,11,
                733,11,
                734,11,
                740,11,
                747,11,
                749,11,
                752,11,
                755,11,
                762,11,
                770,11,
                782,11,
                784,11,
                787,11,
                789,11,
                793,11,
                796,11,
                803,11,
                805,11,
                810,11,
                815,11,
                824,11,
                829,11,
                830,11,
                832,11,
                841,11,
                847,11,
                849,11,
                861,11,
                871,11,
                878,11,
                889,11,
                892,11,
                901,11,
                908,11,
                920,11,
                923,11,
                942,11,
                949,11,
                950,11,
                954,11,
                961,11,
                968,11,
                971,11,
                973,11,
                979,11,
                982,11,
                986,11,
                998,11,
                1001,11,
                1010,11,
                1012,11,
                41,12,
                52,12,
                61,12,
                62,12,
                76,12,
                104,12,
                117,12,
                131,12,
                143,12,
                145,12,
                157,12,
                167,12,
                171,12,
                176,12,
                181,12,
                194,12,
                217,12,
                236,12,
                239,12,
                262,12,
                283,12,
                286,12,
                307,12,
                313,12,
                319,12
            }; // end primitive_polynomials

            // decode polynomial coefficient arrays from primitive_polynomials
            for (int k = 0; k < dim; ++k)
            {
                //void read_prim_pol(int k, int n, int d)
                read_prim_pol(k, primitive_polynomials[k * 2 + 0], primitive_polynomials[k * 2 + 1]);
            }

            // initialize the array of direction integers
            for (int j = 0; j < BITS; ++j)
            {
                directions[0, j] = (1UL << (BITS - j - 1));
            }

            if (dim > 1)
            {
                directions[1, 0] = (1L << BITS - 1);
            }

            if (dim > 2)
            {
                directions[2, 0] = (1L << BITS - 1);
                directions[2, 1] = (1L << BITS - 2);
            }

            if (dim > 3)
            {
                directions[3, 0] = (1L << BITS - 1);
                directions[3, 1] = (3L << BITS - 2);
                directions[3, 2] = (7L << BITS - 3);
            }

            if (dim > 4)
            {
                directions[4, 0] = (1L << BITS - 1);
                directions[4, 1] = (1L << BITS - 2);
                directions[4, 2] = (5L << BITS - 3);
            }

            if (dim > 5)
            {
                directions[5, 0] = (1L << BITS - 1);
                directions[5, 1] = (3L << BITS - 2);
                directions[5, 2] = (1L << BITS - 3);
                directions[5, 3] = (1L << BITS - 4);
            }

            if (dim > 6)
            {
                directions[6, 0] = (1L << BITS - 1);
                directions[6, 1] = (1L << BITS - 2);
                directions[6, 2] = (3L << BITS - 3);
                directions[6, 3] = (7L << BITS - 4);
            }

            if (dim > 7)
            {
                directions[7, 0] = (1L << BITS - 1);
                directions[7, 1] = (3L << BITS - 2);
                directions[7, 2] = (3L << BITS - 3);
                directions[7, 3] = (9L << BITS - 4);
                directions[7, 4] = (9L << BITS - 5);
            }

            if (dim > 8)
            {
                directions[8, 0] = (1L << BITS - 1);
                directions[8, 1] = (3L << BITS - 2);
                directions[8, 2] = (7L << BITS - 3);
                directions[8, 3] = (7L << BITS - 4);
                directions[8, 4] = (21L << BITS - 5);
            }

            if (dim > 9)
            {
                directions[9, 0] = (1L << BITS - 1);
                directions[9, 1] = (1L << BITS - 2);
                directions[9, 2] = (5L << BITS - 3);
                directions[9, 3] = (11L << BITS - 4);
                directions[9, 4] = (27L << BITS - 5);
            }

            if (dim > 10)
            {
                directions[10, 0] = (1L << BITS - 1);
                directions[10, 1] = (1L << BITS - 2);
                directions[10, 2] = (7L << BITS - 3);
                directions[10, 3] = (3L << BITS - 4);
                directions[10, 4] = (29L << BITS - 5);
            }

            if (dim > 11)
            {
                directions[11, 0] = (1L << BITS - 1);
                directions[11, 1] = (3L << BITS - 2);
                directions[11, 2] = (7L << BITS - 3);
                directions[11, 3] = (13L << BITS - 4);
                directions[11, 4] = (3L << BITS - 5);
            }

            if (dim > 12)
            {
                directions[12, 0] = (1L << BITS - 1);
                directions[12, 1] = (3L << BITS - 2);
                directions[12, 2] = (5L << BITS - 3);
                directions[12, 3] = (1L << BITS - 4);
                directions[12, 4] = (15L << BITS - 5);
            }

            if (dim > 13)
            {
                directions[13, 0] = (1L << BITS - 1);
                directions[13, 1] = (1L << BITS - 2);
                directions[13, 2] = (1L << BITS - 3);
                directions[13, 3] = (9L << BITS - 4);
                directions[13, 4] = (23L << BITS - 5);
                directions[13, 5] = (37L << BITS - 6);
            }

            if (dim > 14)
            {
                directions[14, 0] = (1L << BITS - 1);
                directions[14, 1] = (1L << BITS - 2);
                directions[14, 2] = (3L << BITS - 3);
                directions[14, 3] = (13L << BITS - 4);
                directions[14, 4] = (11L << BITS - 5);
                directions[14, 5] = (7L << BITS - 6);
            }

            if (dim > 15)
            {
                directions[15, 0] = (1L << BITS - 1);
                directions[15, 1] = (3L << BITS - 2);
                directions[15, 2] = (3L << BITS - 3);
                directions[15, 3] = (5L << BITS - 4);
                directions[15, 4] = (19L << BITS - 5);
                directions[15, 5] = (33L << BITS - 6);
            }

            if (dim > 16)
            {
                directions[16, 0] = (1L << BITS - 1);
                directions[16, 1] = (1L << BITS - 2);
                directions[16, 2] = (7L << BITS - 3);
                directions[16, 3] = (13L << BITS - 4);
                directions[16, 4] = (25L << BITS - 5);
                directions[16, 5] = (5L << BITS - 6);
            }

            if (dim > 17)
            {
                directions[17, 0] = (1L << BITS - 1);
                directions[17, 1] = (1L << BITS - 2);
                directions[17, 2] = (1L << BITS - 3);
                directions[17, 3] = (13L << BITS - 4);
                directions[17, 4] = (15L << BITS - 5);
                directions[17, 5] = (39L << BITS - 6);
            }

            if (dim > 18)
            {
                directions[18, 0] = (1L << BITS - 1);
                directions[18, 1] = (3L << BITS - 2);
                directions[18, 2] = (5L << BITS - 3);
                directions[18, 3] = (11L << BITS - 4);
                directions[18, 4] = (7L << BITS - 5);
                directions[18, 5] = (11L << BITS - 6);
            }

            if (dim > 19)
            {
                directions[19, 0] = (1L << BITS - 1);
                directions[19, 1] = (3L << BITS - 2);
                directions[19, 2] = (1L << BITS - 3);
                directions[19, 3] = (7L << BITS - 4);
                directions[19, 4] = (3L << BITS - 5);
                directions[19, 5] = (23L << BITS - 6);
                directions[19, 6] = (79L << BITS - 7);
            }

            if (dim > 20)
            {
                directions[20, 0] = (1L << BITS - 1);
                directions[20, 1] = (3L << BITS - 2);
                directions[20, 2] = (1L << BITS - 3);
                directions[20, 3] = (15L << BITS - 4);
                directions[20, 4] = (17L << BITS - 5);
                directions[20, 5] = (63L << BITS - 6);
                directions[20, 6] = (13L << BITS - 7);
            }

            if (dim > 21)
            {
                directions[21, 0] = (1L << BITS - 1);
                directions[21, 1] = (3L << BITS - 2);
                directions[21, 2] = (3L << BITS - 3);
                directions[21, 3] = (3L << BITS - 4);
                directions[21, 4] = (25L << BITS - 5);
                directions[21, 5] = (17L << BITS - 6);
                directions[21, 6] = (115L << BITS - 7);
            }

            if (dim > 22)
            {
                directions[22, 0] = (1L << BITS - 1);
                directions[22, 1] = (3L << BITS - 2);
                directions[22, 2] = (7L << BITS - 3);
                directions[22, 3] = (9L << BITS - 4);
                directions[22, 4] = (31L << BITS - 5);
                directions[22, 5] = (29L << BITS - 6);
                directions[22, 6] = (17L << BITS - 7);
            }

            if (dim > 23)
            {
                directions[23, 0] = (1L << BITS - 1);
                directions[23, 1] = (1L << BITS - 2);
                directions[23, 2] = (3L << BITS - 3);
                directions[23, 3] = (15L << BITS - 4);
                directions[23, 4] = (29L << BITS - 5);
                directions[23, 5] = (15L << BITS - 6);
                directions[23, 6] = (41L << BITS - 7);
            }

            if (dim > 24)
            {
                directions[24, 0] = (1L << BITS - 1);
                directions[24, 1] = (3L << BITS - 2);
                directions[24, 2] = (1L << BITS - 3);
                directions[24, 3] = (9L << BITS - 4);
                directions[24, 4] = (5L << BITS - 5);
                directions[24, 5] = (21L << BITS - 6);
                directions[24, 6] = (119L << BITS - 7);
            }

            if (dim > 25)
            {
                directions[25, 0] = (1L << BITS - 1);
                directions[25, 1] = (1L << BITS - 2);
                directions[25, 2] = (5L << BITS - 3);
                directions[25, 3] = (5L << BITS - 4);
                directions[25, 4] = (1L << BITS - 5);
                directions[25, 5] = (27L << BITS - 6);
                directions[25, 6] = (33L << BITS - 7);
            }

            if (dim > 26)
            {
                directions[26, 0] = (1L << BITS - 1);
                directions[26, 1] = (1L << BITS - 2);
                directions[26, 2] = (3L << BITS - 3);
                directions[26, 3] = (1L << BITS - 4);
                directions[26, 4] = (23L << BITS - 5);
                directions[26, 5] = (13L << BITS - 6);
                directions[26, 6] = (75L << BITS - 7);
            }

            if (dim > 27)
            {
                directions[27, 0] = (1L << BITS - 1);
                directions[27, 1] = (1L << BITS - 2);
                directions[27, 2] = (7L << BITS - 3);
                directions[27, 3] = (7L << BITS - 4);
                directions[27, 4] = (19L << BITS - 5);
                directions[27, 5] = (25L << BITS - 6);
                directions[27, 6] = (105L << BITS - 7);
            }

            if (dim > 28)
            {
                directions[28, 0] = (1L << BITS - 1);
                directions[28, 1] = (3L << BITS - 2);
                directions[28, 2] = (5L << BITS - 3);
                directions[28, 3] = (5L << BITS - 4);
                directions[28, 4] = (21L << BITS - 5);
                directions[28, 5] = (9L << BITS - 6);
                directions[28, 6] = (7L << BITS - 7);
            }

            if (dim > 29)
            {
                directions[29, 0] = (1L << BITS - 1);
                directions[29, 1] = (1L << BITS - 2);
                directions[29, 2] = (1L << BITS - 3);
                directions[29, 3] = (15L << BITS - 4);
                directions[29, 4] = (5L << BITS - 5);
                directions[29, 5] = (49L << BITS - 6);
                directions[29, 6] = (59L << BITS - 7);
            }

            if (dim > 30)
            {
                directions[30, 0] = (1L << BITS - 1);
                directions[30, 1] = (3L << BITS - 2);
                directions[30, 2] = (5L << BITS - 3);
                directions[30, 3] = (15L << BITS - 4);
                directions[30, 4] = (17L << BITS - 5);
                directions[30, 5] = (19L << BITS - 6);
                directions[30, 6] = (21L << BITS - 7);
            }

            if (dim > 31)
            {
                directions[31, 0] = (1L << BITS - 1);
                directions[31, 1] = (1L << BITS - 2);
                directions[31, 2] = (7L << BITS - 3);
                directions[31, 3] = (11L << BITS - 4);
                directions[31, 4] = (13L << BITS - 5);
                directions[31, 5] = (29L << BITS - 6);
                directions[31, 6] = (3L << BITS - 7);
            }

            // Random initialization in dimension bigger than 32
            for (int k = 32; k < dim; ++k)
            {
                int degree_k = primitive_polynomials[k * 2 + 1];
                for (int l = 0; l < degree_k; l++)
                {
                    double u = mt.RandomDouble();
                    ulong f = (1UL << l + 1);
                    ulong n = (ulong)(f * u);
                    while (n % 2 == 0)
                    {
                        u = mt.RandomDouble();
                        n = (ulong)(f * u);
                    }

                    directions[k, l] = (n << (BITS - l - 1));
                }
            } // end direction integer initialization


            // computation of direction integer v_kl for k>=degree[k]
            for (int k = 1; k < dim; k++)
            {

                int degree_k = primitive_polynomials[k * 2 + 1];
                for (int l = degree_k; l < BITS; ++l)
                {
                    ulong n = (directions[k, l - degree_k] >> degree_k);
                    for (int j = 1; j <= degree_k; ++j)
                    {
                        if (coefficients[k, j] != 0)
                        {
                            n = n ^ directions[k, l - j];
                        }
                    }
                    directions[k, l] = n;
                }
            } // end for k


            // initialize the vector of Sobol integers and Sobol points
            restart();
        }

        public void restart()
        {
            index = 1;

            // return the integer vector to the initial state
            for (int k = 0; k < dim; ++k)
            {
                x_integer[k] = directions[k, 0];
                x_real[k] = ((double)x_integer[k]) / N;
            }
        }


        public void reset()
        {
            restart();
        }

        private void generateNextIteration()
        {
            // find the rightmost zero bit of index
            int j = 0;
            int n = index;

            while (n % 2 == 1)
            {
                n = n >> 1;
                ++j;
            }

            for (int k = 0; k < dim; ++k)
            {
                x_integer[k] ^= directions[k, j];
                x_real[k] = ((double)x_integer[k]) / N;
            }

            ++index;
        }

        #region --- Test ------------------------------------------------------------------------

#if TEST
		public static void TestHarness()
		{
			const int DIM = 80;

			Series series = new Series("1,2", ChartType.Point);
			MultiChart2D chart = new MultiChart2D();
			
			Vector rands = new Vector(DIM);
			Sobol sobol = new Sobol(DIM);
			for (int i = 0; i < 256; ++i)
			{
				sobol.nextRandomVector(rands);
				series.addPoint(rands[13], rands[50]);
			}

			chart.addSeries(series);
			SingleControlForm form = new SingleControlForm("Vol title");
			form.setControl(chart);
			form.ShowDialog();
		}
#endif

        #endregion

        public double nextRandomDouble()
        {
            generateNextIteration();
            return x_real[0];
        }

        public void nextRandomVector(Vector vector)
        {
            generateNextIteration();
            for (int i = 0; i < dim; ++i)
            {
                vector[i] = x_real[i];
            }
        }

        public void nextRandomVectorMultiple(int N, Vector vector)
        {
            for (int j = 0; j < N; ++j)
            {
                generateNextIteration();
                for (int i = 0; i < dim; ++i)
                {
                    vector[j * dim + i] = x_real[i];
                }
            }
        }

        public void nextRandomVectorDiminishing(int N, Vector vector)
        {
            // We need to output the following numbers in sequential order (e.g. for N=4 we have 10 numbers)
            //
            // x x x x
            //   x x x
            //     x x
            //       x
            //

            int k = 0;

            for (int i = 0; i < N; ++i)
            {
                generateNextIteration();
                for (int j = i; j < N; ++j)
                {
                    vector[k] = x_real[j];
                    ++k;
                }
            }
        }
    }
}
